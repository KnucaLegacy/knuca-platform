buildscript {

    ext {
        springBootVersion = '1.5.8.RELEASE'
        jUnitVersion = '4.12'
        lombokVersion = '1.16.18'
        swaggerVersion = '2.6.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'application'

version = '0.0.1-SNAPSHOT'
mainClassName = "com.theopus.restservice.RestRunner"

task runnerStartScript(type: CreateStartScripts) {
    description "Creates OS specific scripts to call the 'other' entry point"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'com.theopus.upload.UploadRunner'
    applicationName = 'knuca-uploader'
    defaultJvmOpts = ["-Xmx64m", "-Xms32m", "-Dspring.config.location=../conf/knuca-upload.yml"]
}

task uploaderStartScript(type: CreateStartScripts) {
    description "Creates OS specific scripts to call the 'other' entry point"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'com.theopus.restservice.RestRunner'
    applicationName = 'knuca-rest'
    defaultJvmOpts = ["-Xmx64m", "-Xms32m", "-Dspring.config.location=../conf/knuca-rest.yml"]
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(runnerStartScript)
    from(uploaderStartScript)
    fileMode = 0755
}
dependencies {
    compile project(':knuca-schedule-rest-service')
    compile project(':knuca-schedule-upload')
}

distTar {
    into("${project.name}-${version}/conf") {
        from "knuca-schedule-rest-service/src/main/resources/"
        include "application.yml"
        filter {it.replaceAll("classpath:","../conf/")}
        rename ('application.yml', "knuca-rest.yml")
    }
    into("${project.name}-${version}/conf") {
        from "knuca-schedule-upload/src/main/resources/"
        include "application.yml"
        filter {it.replaceAll("classpath:","../conf/")}
        rename ('application.yml', "knuca-upload.yml")
    }
}

distZip {
    into("${project.name}-${version}/conf") {
        from "knuca-schedule-rest-service/src/main/resources/"
        include "application.yml"
        filter {it.replaceAll("classpath:","../conf/")}
        rename ('application.yml', "knuca-rest.yml")
    }
    into("${project.name}-${version}/conf") {
        from "knuca-schedule-upload/src/main/resources/"
        include "application.yml"
        filter {it.replaceAll("classpath:","../conf/")}
        rename ('application.yml', "knuca-upload.yml")
    }
}

startScripts {
    doLast {
        windowsScript.delete()
        unixScript.delete()
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'checkstyle'

    group = 'com.theopus'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile("junit:junit:${jUnitVersion}")
        compile group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    }

    checkstyle {
        ignoreFailures = false
        configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
        toolVersion "8.4"
        checkstyleTest.enabled = false
        maxErrors 0
        maxWarnings 0

    }

    checkstyleMain.finalizedBy {
        copyCheckstyleReport
    }

    checkstyleTest.finalizedBy {
        copyCheckstyleReport
    }

    task copyCheckstyleReport(type: Copy) {
        from "build/reports/checkstyle/"
        into "${rootProject.rootDir}/build/reports/checkstyle/${project.name}"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}



